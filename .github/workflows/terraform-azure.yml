name: Terraform IaC Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform-init:
    name: Terraform Init
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Azure Service Principal credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.APP_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Remove Old Terraform Files
        run: rm -rf .terraform .terraform.lock.hcl

      - name: Terraform Init (Ensure Provider Install)
        run: terraform init -input=false -upgrade | tee terraform-init.log

      - name: Archive Terraform Init State
        run: tar -cvf terraform-init-output.tar .terraform terraform-init.log .terraform.lock.hcl

      - name: Upload Terraform Init State
        uses: actions/upload-artifact@v4
        with:
          name: terraform-init-output
          path: terraform-init-output.tar

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    needs: terraform-init

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Terraform Init State
        uses: actions/download-artifact@v4
        with:
          name: terraform-init-output
          path: .

      - name: Extract Terraform Init State
        run: tar -xvf terraform-init-output.tar

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Validate
        run: terraform validate

  tflint:
    name: Terraform Lint (TFLint)
    runs-on: ubuntu-latest
    needs: terraform-validate

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install TFLint
        run: |
          curl -fsSL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run TFLint
        run: |
          tflint --init
          tflint --format=compact

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: tflint

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Terraform Init State
        uses: actions/download-artifact@v4
        with:
          name: terraform-init-output
          path: .

      - name: Extract Terraform Init State
        run: tar -xvf terraform-init-output.tar

      - name: Set Azure Service Principal credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.APP_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init (Ensure Providers are Installed)
        run: terraform init -input=false -upgrade

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Archive Terraform Plan State
        run: tar -cvf terraform-plan-output.tar tfplan .terraform .terraform.lock.hcl

      - name: Upload Terraform Plan State
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-output
          path: terraform-plan-output.tar

  infracost:
    name: InfraCost Estimate
    runs-on: ubuntu-latest
    needs: terraform-plan

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Terraform Plan State
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-output
          path: .

      - name: Extract Terraform Plan State
        run: tar -xvf terraform-plan-output.tar

      - name: Install InfraCost CLI
        run: curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh

      - name: Set InfraCost API Key
        run: echo "INFRACOST_API_KEY=${{ secrets.INFRACOST_API_KEY }}" >> $GITHUB_ENV

      - name: Run InfraCost Breakdown (Table Format)
        run: infracost breakdown --path=. --format=table --out-file=infracost.txt

      - name: Show InfraCost Breakdown
        run: cat infracost.txt

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: infracost
    permissions:
      id-token: write
      contents: read
    environment: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Terraform Plan State
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-output
          path: .

      - name: Extract Terraform Plan State
        run: tar -xvf terraform-plan-output.tar

      - name: Verify `.terraform` Directory and Lock File
        run: |
          if [ ! -d ".terraform" ]; then
            echo "❌ .terraform directory NOT FOUND! Terraform Plan was unsuccessful."
            exit 1
          fi
          if [ ! -f .terraform.lock.hcl ]; then
            echo "❌ .terraform.lock.hcl file NOT FOUND!"
            exit 1
          fi

      - name: Set Azure Service Principal credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.APP_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init (Ensure Provider Cache Exists)
        run: terraform init -input=false -upgrade

      - name: Terraform Apply
        run: terraform apply -input=false tfplan
