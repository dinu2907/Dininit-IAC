name: Terraform IaC Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform-init:
    name: Terraform Init
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Azure Service Principal credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.APP_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --version

      - name: Run TFLint (Terraform Linter)
        run: |
          tflint --init
          tflint --recursive
        continue-on-error: false  # Fail workflow if linting errors are found

      - name: Remove Lock File (Ensure Clean Init)
        run: rm -f .terraform.lock.hcl || true

      - name: Terraform Init (With Debug)
        run: |
          terraform init -input=false -upgrade | tee terraform-init.log
          terraform providers lock -platform=linux_amd64
          echo "Checking if .terraform directory exists..."
          ls -lA .terraform || echo "❌ .terraform directory NOT FOUND!"

      - name: Archive Terraform Init Output
        run: tar -cvf terraform-init-output.tar terraform-init.log .terraform/ .terraform.lock.hcl

      - name: Upload Terraform Init Output
        uses: actions/upload-artifact@v4
        with:
          name: terraform-init-output
          path: terraform-init-output.tar

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-init

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Terraform Init Output
        uses: actions/download-artifact@v4
        with:
          name: terraform-init-output
          path: .

      - name: Extract Terraform Init Output
        run: tar -xvf terraform-init-output.tar

      - name: Verify `.terraform` Directory Exists
        run: |
          if [ ! -d ".terraform" ]; then
            echo "❌ .terraform directory NOT FOUND! Terraform Init was unsuccessful."
            exit 1
          fi

      - name: Set Azure Service Principal credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.APP_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-output
          path: tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    permissions:
      id-token: write
      contents: read
    environment: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Terraform Plan Output
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-output
          path: .

      - name: Verify Artifact Existence
        run: |
          if [ ! -f tfplan ]; then
            echo "❌ Terraform Plan file NOT FOUND!"
            exit 1
          fi

      - name: Set Azure Service Principal credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.APP_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Wait for Manual Approval
        run: |
          echo "🚀 Waiting for manual approval in GitHub Actions UI..."
          sleep 10  # Simulating manual approval (replace with environment protection)
        timeout-minutes: 60  # Set actual timeout

      - name: Terraform Apply
        run: terraform apply tfplan
