name: Terraform IaC Pipeline

on:
  push:
    branches:
      - main  # Trigger on push to main branch
  workflow_dispatch:  # Allows manual trigger

jobs:
  terraform-init:
    name: Terraform Init & Plan
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set Azure authentication environment variables
      - name: Set Azure Service Principal credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.APP_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      # Step 3: Set up Terraform CLI
      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Specify required Terraform version

      # Step 4: Terraform Init
      - name: Terraform Init
        run: terraform init

      # Step 5: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan

      # Step 6: Save Terraform Init Output
      - name: Archive Terraform Init Output
        run: tar -cvf terraform-init-output.tar .terraform/ tfplan

      # Step 7: Upload Terraform Init Output Artifact
      - name: Upload Terraform Init Output
        uses: actions/upload-artifact@v4
        with:
          name: terraform-init-output
          path: terraform-init-output.tar

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-init
    permissions:
      id-token: write
      contents: read
    environment: production

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: List Artifacts Before Download
      - name: Debug - List Available Artifacts
        run: ls -R ${{ runner.temp }}/_github_home/_temp || echo_
